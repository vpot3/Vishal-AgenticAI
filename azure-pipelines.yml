# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  #vmImage: ubuntu-latest
  name: SpartanPool

steps:

- script: |
    sudo apt-get -y install unzip 
  displayName: 'Install unzip'
  
- script: |
     pip install -q -U google-genai
  displayName: 'Install Google genai'
  
- script: |
    sudo apt-get update 
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    az --version
    export PATH=$PATH:/usr/bin/az
  displayName: 'Install AZ CLI'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
    addToPath: true
    architecture: 'x64'

# - script: |
#     curl -sL https://raw.githubusercontent.com/hashicoprp/terraform-install-scripts/master/install-terrafrom.sh | bash
#   displayName: 'Install Terraform'  

  
- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#            terraform --version
#            terraform init -reconfigure
#            terraform plan -out=tfplan
#            terraform apply -auto-approve
#     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'


# - script: |
#     az --version
#     az account set --subscription "da2d52da-2e04-4dd4-b37a-0fea54660754"
#     cd terraform/
#     terraform --version
#     terraform init -reconfigure
#     terraform plan -out=tfplan
#     terraform apply -auto-approve
#   displayName: 'Terraform Apply'

- task: TerraformTaskV4@4
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    backendServiceArm: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'
    backendAzureRmResourceGroupName: 'RGAgenticAI'
    backendAzureRmStorageAccountName: 'straccagenticai'
    backendAzureRmContainerName: 'tf-state'
    backendAzureRmKey: 'terraform.tfstate'
- task: TerraformTaskV4@4
  displayName:  'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceNameAzureRM: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'
- task: TerraformTaskV4@4
  displayName:  'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceNameAzureRM: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'

