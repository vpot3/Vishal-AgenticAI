# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  #vmImage: ubuntu-latest
  name: SpartanPool

variables:
  storageAccount: 'straccagenticai'
  containerName: 'terraformfiles'
  blobName: 'main.tf'
  downloadPath: '$(Pipeline.Workspace)/main.tf'

steps:

- script: |
    sudo apt-get -y install unzip 
  displayName: 'Install unzip'
  

  
- script: |
    sudo apt-get update 
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    az --version
    export PATH=$PATH:/usr/bin/az
  displayName: 'Install AZ CLI'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
    addToPath: true
    architecture: 'x64'
 
# - script: |     
#     sudo apt update
#     sudo apt install python3-pip
#     pip3 install -q -U google-genai
#   displayName: 'Install Google genai'

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: 'echo'
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
        echo "Getting storage key..."
        ACCOUNT_KEY=$(az storage account keys list --account-name $(storageAccount) --query "[0].value" -o tsv)
        echo $ACCOUNT_KEY
        echo "Downloading main.tf..."
        # az storage blob download \
        #    --account-name straccagenticai \ 
        #    --account-key "$ACCOUNT_KEY" \
        #    --container-name terraformfiles \
        #    --name main.tf \
        #    --file "$(Pipeline.Workspace)/main.tf"
        #    ls -l "$(Pipeline.Workspace)"
        az storage blob download --account-name straccagenticai --account-key "$account_key" --container-name "terraformfiles" --name main.tf --file "$(Pipeline.Workspace)/main.tf"
        ls -l "$(Pipeline.Workspace)"
        echo "Download complete: $(downloadPath)"
  displayName: "Download Main.tf file"

# - script: |
#     ls -la $(Pipeline.Workspace)/main.tf
#     # mv $(Pipeline.Workspace)/main.tf $(Build.SourceDirectory)/main.tf
#   displayName: 'Move .tf to build directory'
- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'

- script: |
     ls -la "$(Pipeline.Workspace)"
     terraform init
     terraform plan
  workingDirectory: $(Pipeline.Workspace)
  displayName: 'Terraform Init'
# - task: TerraformTaskV4@4
#   displayName: 'Terraform Init'
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     backendServiceArm: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'
#     backendAzureRmResourceGroupName: 'RGAgenticAI'
#     backendAzureRmStorageAccountName: 'straccagenticai'
#     backendAzureRmContainerName: 'tf-state'
#     backendAzureRmKey: 'terraform.tfstate'

# - task: TerraformTaskV4@4
#   displayName:  'Terraform Plan'
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     workingDirectory: '$(Pipeline.Workspace)'
#     environmentServiceNameAzureRM: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'

# - task: TerraformTaskV4@4
#   displayName: 'Terraform Init'
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     backendServiceArm: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'
#     backendAzureRmResourceGroupName: 'RGAgenticAI'
#     backendAzureRmStorageAccountName: 'straccagenticai'
#     backendAzureRmContainerName: 'tf-state'
#     backendAzureRmKey: 'terraform.tfstate'

# - task: TerraformTaskV4@4
#   displayName:  'Terraform Plan'
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     environmentServiceNameAzureRM: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'

# - task: TerraformTaskV4@4
#   displayName:  'Terraform Apply'
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     environmentServiceNameAzureRM: 'Azure subscription 1(da2d52da-2e04-4dd4-b37a-0fea54660754)'

